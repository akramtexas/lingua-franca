<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="SimpleTestIndividualActors" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.1.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="68.0, 32.0">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={253, 134, 934, 632}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 522]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{355.0, 255.181640625}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This model checks the manually written files Source.js and Test.js.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[155.0, 45.0]">
        </property>
    </property>
    <entity name="JavaScript" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Boilerplate included for all actors.&#10;var PERIODIC = true;&#10;var ONCE = false;&#10;function schedule(trigger, time, isPeriodic) {&#10;    if (isPeriodic) {&#10;        return trigger.actor.setInterval(trigger.reaction, time);&#10;    } else {&#10;        return trigger.actor.setTimeout(trigger.reaction, time);&#10;    }&#10;}&#10;function set(port, value) {&#10;    if (!port) {&#10;        throw &quot;Illegal reference to undeclared output.&quot;;&#10;    }&#10;    this.send(port, value);&#10;}&#10;set.bind(this);&#10;// Code generated for this particular actor.&#10;// Trigger data structure:&#10;var t = {'actor':this, 'triggerName':'t', 'reaction':reaction_t};&#10;// *********** From the preamble, verbatim:&#10;        var n = 0;&#10;// *********** End of preamble.&#10;&#10;// Generated setup function:&#10;exports.setup = function() {&#10;    this.parameter('period', {'type':'int', 'value':1000});&#10;    this.output('y', {'type':'int'});&#10;}&#10;&#10;// Generated initialize function:&#10;exports.initialize = function() {&#10;    var period = this.getParameter('period');&#10;    schedule(t, period, PERIODIC);&#10;    // *********** From initialize, verbatim:&#10;        n = 0;&#10;    // *********** End of initialize.&#10;}&#10;function reaction_t() {&#10;    var period = this.getParameter('period');&#10;    var y = 'y'; // FIXME: Too easy to cheat! User could just pass a string name&#10;                 // of an output port to set().&#10;    // *********** From reaction, verbatim:&#10;        n = n + 1;&#10;        set(y, n);&#10;    // *********** End of reaction code.&#10;}&#10;// Bind the reaction function to this actor.&#10;reaction_t.bind(this);&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{150, 205}">
        </property>
        <property name="period" class="ptolemy.data.expr.Parameter" value="10">
        </property>
        <port name="y" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="JavaScript2" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Code generated for this particular actor.&#10;// *********** From the preamble, verbatim:&#10;        var i = 0;&#10;// *********** End of preamble.&#10;&#10;// Generated setup function:&#10;exports.setup = function() {&#10;    this.parameter('expected', {'type':'JSON', 'value':'[]'});&#10;    this.input('x', {'type':'int'});&#10;}&#10;&#10;// Generated initialize function:&#10;exports.initialize = function() {&#10;    var expected = this.getParameter('expected');&#10;    // *********** From initialize, verbatim:&#10;        i = 0;&#10;    // *********** End of initialize.&#10;    this.addInputHandler('x', reaction_x);&#10;}&#10;function reaction_x() {&#10;    var expected = this.getParameter('expected');&#10;    var x = this.get('x');&#10;    // *********** From reaction, verbatim:&#10;        if (expected[i] != x) {&#10;            throw &quot;Expected: &quot; + expected[i] + &quot;, but got: &quot; + x;&#10;        }&#10;        i += 1;&#10;        if (i &gt;= expected.length) {&#10;            this.stop();&#10;        }&#10;    // *********** End of reaction code.&#10;}&#10;// Bind the reaction function to this actor.&#10;reaction_x.bind(this);&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{280, 200}">
        </property>
        <property name="expected" class="ptolemy.data.expr.Parameter" value="[1, 2, 3, 4]">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="x" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="JavaScript.y" relation="relation"/>
    <link port="JavaScript2.x" relation="relation"/>
</entity>

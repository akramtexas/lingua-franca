/*
 * generated by Xtext 2.17.0
 */
package org.icyphy.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LinguaFrancaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetTargetParserRuleCall_0_0 = (RuleCall)cTargetAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cBlocksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cBlocksAlternatives_2_0 = (Alternatives)cBlocksAssignment_2.eContents().get(0);
		private final RuleCall cBlocksActorParserRuleCall_2_0_0 = (RuleCall)cBlocksAlternatives_2_0.eContents().get(0);
		private final RuleCall cBlocksCompositeParserRuleCall_2_0_1 = (RuleCall)cBlocksAlternatives_2_0.eContents().get(1);
		
		///////////// Overall file
		//Model:
		//	target=Target
		//	imports+=Import*
		//	blocks+=(Actor | Composite)+;
		@Override public ParserRule getRule() { return rule; }
		
		//target=Target imports+=Import* blocks+=(Actor | Composite)+
		public Group getGroup() { return cGroup; }
		
		//target=Target
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//Target
		public RuleCall getTargetTargetParserRuleCall_0_0() { return cTargetTargetParserRuleCall_0_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }
		
		//blocks+=(Actor | Composite)+
		public Assignment getBlocksAssignment_2() { return cBlocksAssignment_2; }
		
		//(Actor | Composite)
		public Alternatives getBlocksAlternatives_2_0() { return cBlocksAlternatives_2_0; }
		
		//Actor
		public RuleCall getBlocksActorParserRuleCall_2_0_0() { return cBlocksActorParserRuleCall_2_0_0; }
		
		//Composite
		public RuleCall getBlocksCompositeParserRuleCall_2_0_1() { return cBlocksCompositeParserRuleCall_2_0_1; }
	}
	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Target");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		///////////// Top level elements
		//Target:
		//	'target' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'target' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'target'
		public Keyword getTargetKeyword_0() { return cTargetKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePathParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	'import' name=Path ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' name=Path ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//name=Path
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Path
		public RuleCall getNamePathParserRuleCall_1_0() { return cNamePathParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParamsParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInputsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInputsInputParserRuleCall_4_0 = (RuleCall)cInputsAssignment_4.eContents().get(0);
		private final Assignment cOutputsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutputsOutputParserRuleCall_5_0 = (RuleCall)cOutputsAssignment_5.eContents().get(0);
		private final Assignment cTriggersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTriggersTriggerParserRuleCall_6_0 = (RuleCall)cTriggersAssignment_6.eContents().get(0);
		private final Assignment cPreambleAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPreamblePreambleParserRuleCall_7_0 = (RuleCall)cPreambleAssignment_7.eContents().get(0);
		private final Assignment cInitializeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cInitializeInitializeParserRuleCall_8_0 = (RuleCall)cInitializeAssignment_8.eContents().get(0);
		private final Assignment cReactionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cReactionsReactionParserRuleCall_9_0 = (RuleCall)cReactionsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//// The following enforces the order of definitions:
		//// inputs, outputs, triggers, preamble, etc.
		//Actor:
		//	'actor' name=ID parameters=Params? '{'
		//	inputs+=Input*
		//	outputs+=Output*
		//	triggers+=Trigger*
		//	preamble=Preamble?
		//	initialize=Initialize?
		//	reactions+=Reaction*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'actor' name=ID parameters=Params? '{' inputs+=Input* outputs+=Output* triggers+=Trigger* preamble=Preamble?
		//initialize=Initialize? reactions+=Reaction* '}'
		public Group getGroup() { return cGroup; }
		
		//'actor'
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//parameters=Params?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//Params
		public RuleCall getParametersParamsParserRuleCall_2_0() { return cParametersParamsParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//inputs+=Input*
		public Assignment getInputsAssignment_4() { return cInputsAssignment_4; }
		
		//Input
		public RuleCall getInputsInputParserRuleCall_4_0() { return cInputsInputParserRuleCall_4_0; }
		
		//outputs+=Output*
		public Assignment getOutputsAssignment_5() { return cOutputsAssignment_5; }
		
		//Output
		public RuleCall getOutputsOutputParserRuleCall_5_0() { return cOutputsOutputParserRuleCall_5_0; }
		
		//triggers+=Trigger*
		public Assignment getTriggersAssignment_6() { return cTriggersAssignment_6; }
		
		//Trigger
		public RuleCall getTriggersTriggerParserRuleCall_6_0() { return cTriggersTriggerParserRuleCall_6_0; }
		
		//preamble=Preamble?
		public Assignment getPreambleAssignment_7() { return cPreambleAssignment_7; }
		
		//Preamble
		public RuleCall getPreamblePreambleParserRuleCall_7_0() { return cPreamblePreambleParserRuleCall_7_0; }
		
		//initialize=Initialize?
		public Assignment getInitializeAssignment_8() { return cInitializeAssignment_8; }
		
		//Initialize
		public RuleCall getInitializeInitializeParserRuleCall_8_0() { return cInitializeInitializeParserRuleCall_8_0; }
		
		//reactions+=Reaction*
		public Assignment getReactionsAssignment_9() { return cReactionsAssignment_9; }
		
		//Reaction
		public RuleCall getReactionsReactionParserRuleCall_9_0() { return cReactionsReactionParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class CompositeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Composite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompositeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParamsParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInputsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInputsInputParserRuleCall_4_0 = (RuleCall)cInputsAssignment_4.eContents().get(0);
		private final Assignment cOutputsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutputsOutputParserRuleCall_5_0 = (RuleCall)cOutputsAssignment_5.eContents().get(0);
		private final Assignment cTriggersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTriggersTriggerParserRuleCall_6_0 = (RuleCall)cTriggersAssignment_6.eContents().get(0);
		private final Assignment cPreambleAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPreamblePreambleParserRuleCall_7_0 = (RuleCall)cPreambleAssignment_7.eContents().get(0);
		private final Assignment cInitializeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cInitializeInitializeParserRuleCall_8_0 = (RuleCall)cInitializeAssignment_8.eContents().get(0);
		private final Assignment cReactionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cReactionsReactionParserRuleCall_9_0 = (RuleCall)cReactionsAssignment_9.eContents().get(0);
		private final Assignment cInstancesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cInstancesInstanceParserRuleCall_10_0 = (RuleCall)cInstancesAssignment_10.eContents().get(0);
		private final Assignment cConnectionsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cConnectionsConnectionParserRuleCall_11_0 = (RuleCall)cConnectionsAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Composite:
		//	'composite' name=ID parameters=Params? '{'
		//	inputs+=Input*
		//	outputs+=Output*
		//	triggers+=Trigger*
		//	preamble=Preamble?
		//	initialize=Initialize?
		//	reactions+=Reaction*
		//	instances+=Instance*
		//	connections+=Connection*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'composite' name=ID parameters=Params? '{' inputs+=Input* outputs+=Output* triggers+=Trigger* preamble=Preamble?
		//initialize=Initialize? reactions+=Reaction* instances+=Instance* connections+=Connection* '}'
		public Group getGroup() { return cGroup; }
		
		//'composite'
		public Keyword getCompositeKeyword_0() { return cCompositeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//parameters=Params?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//Params
		public RuleCall getParametersParamsParserRuleCall_2_0() { return cParametersParamsParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//inputs+=Input*
		public Assignment getInputsAssignment_4() { return cInputsAssignment_4; }
		
		//Input
		public RuleCall getInputsInputParserRuleCall_4_0() { return cInputsInputParserRuleCall_4_0; }
		
		//outputs+=Output*
		public Assignment getOutputsAssignment_5() { return cOutputsAssignment_5; }
		
		//Output
		public RuleCall getOutputsOutputParserRuleCall_5_0() { return cOutputsOutputParserRuleCall_5_0; }
		
		//triggers+=Trigger*
		public Assignment getTriggersAssignment_6() { return cTriggersAssignment_6; }
		
		//Trigger
		public RuleCall getTriggersTriggerParserRuleCall_6_0() { return cTriggersTriggerParserRuleCall_6_0; }
		
		//preamble=Preamble?
		public Assignment getPreambleAssignment_7() { return cPreambleAssignment_7; }
		
		//Preamble
		public RuleCall getPreamblePreambleParserRuleCall_7_0() { return cPreamblePreambleParserRuleCall_7_0; }
		
		//initialize=Initialize?
		public Assignment getInitializeAssignment_8() { return cInitializeAssignment_8; }
		
		//Initialize
		public RuleCall getInitializeInitializeParserRuleCall_8_0() { return cInitializeInitializeParserRuleCall_8_0; }
		
		//reactions+=Reaction*
		public Assignment getReactionsAssignment_9() { return cReactionsAssignment_9; }
		
		//Reaction
		public RuleCall getReactionsReactionParserRuleCall_9_0() { return cReactionsReactionParserRuleCall_9_0; }
		
		//instances+=Instance*
		public Assignment getInstancesAssignment_10() { return cInstancesAssignment_10; }
		
		//Instance
		public RuleCall getInstancesInstanceParserRuleCall_10_0() { return cInstancesInstanceParserRuleCall_10_0; }
		
		//connections+=Connection*
		public Assignment getConnectionsAssignment_11() { return cConnectionsAssignment_11; }
		
		//Connection
		public RuleCall getConnectionsConnectionParserRuleCall_11_0() { return cConnectionsConnectionParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameInputKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///////////// Statements
		//// Note explicit allowance of keywords for names of inputs, outputs, triggers.
		//Input:
		//	'input' name=(ID | 'input') (':' type=Type)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'input' name=(ID | 'input') (':' type=Type)? ';'
		public Group getGroup() { return cGroup; }
		
		//'input'
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }
		
		//name=(ID | 'input')
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(ID | 'input')
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//'input'
		public Keyword getNameInputKeyword_1_0_1() { return cNameInputKeyword_1_0_1; }
		
		//(':' type=Type)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//type=Type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameOutputKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Output:
		//	'output' name=(ID | 'output') (':' type=Type)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'output' name=(ID | 'output') (':' type=Type)? ';'
		public Group getGroup() { return cGroup; }
		
		//'output'
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }
		
		//name=(ID | 'output')
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(ID | 'output')
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//'output'
		public Keyword getNameOutputKeyword_1_0_1() { return cNameOutputKeyword_1_0_1; }
		
		//(':' type=Type)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//type=Type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTriggerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameTriggerKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Assignment cPeriodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPeriodPeriodParserRuleCall_2_0 = (RuleCall)cPeriodAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Trigger:
		//	'trigger' name=(ID | 'trigger') period=Period? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'trigger' name=(ID | 'trigger') period=Period? ';'
		public Group getGroup() { return cGroup; }
		
		//'trigger'
		public Keyword getTriggerKeyword_0() { return cTriggerKeyword_0; }
		
		//name=(ID | 'trigger')
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(ID | 'trigger')
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//'trigger'
		public Keyword getNameTriggerKeyword_1_0_1() { return cNameTriggerKeyword_1_0_1; }
		
		//period=Period?
		public Assignment getPeriodAssignment_2() { return cPeriodAssignment_2; }
		
		//Period
		public RuleCall getPeriodPeriodParserRuleCall_2_0() { return cPeriodPeriodParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Reaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cTriggersAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cTriggersIDTerminalRuleCall_1_1_0_0 = (RuleCall)cTriggersAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cTriggersAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cTriggersIDTerminalRuleCall_1_1_1_1_0 = (RuleCall)cTriggersAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cGetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGetsGetsParserRuleCall_2_0 = (RuleCall)cGetsAssignment_2.eContents().get(0);
		private final Assignment cSetsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSetsSetsParserRuleCall_3_0 = (RuleCall)cSetsAssignment_3.eContents().get(0);
		private final Assignment cCodeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCodeCODETerminalRuleCall_4_0 = (RuleCall)cCodeAssignment_4.eContents().get(0);
		
		//Reaction:
		//	'reaction' ('(' (triggers+=ID (',' triggers+=ID)*)? ')')?
		//	gets=Gets?
		//	sets=Sets?
		//	code=CODE;
		@Override public ParserRule getRule() { return rule; }
		
		//'reaction' ('(' (triggers+=ID (',' triggers+=ID)*)? ')')? gets=Gets? sets=Sets? code=CODE
		public Group getGroup() { return cGroup; }
		
		//'reaction'
		public Keyword getReactionKeyword_0() { return cReactionKeyword_0; }
		
		//('(' (triggers+=ID (',' triggers+=ID)*)? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//(triggers+=ID (',' triggers+=ID)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//triggers+=ID
		public Assignment getTriggersAssignment_1_1_0() { return cTriggersAssignment_1_1_0; }
		
		//ID
		public RuleCall getTriggersIDTerminalRuleCall_1_1_0_0() { return cTriggersIDTerminalRuleCall_1_1_0_0; }
		
		//(',' triggers+=ID)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }
		
		//triggers+=ID
		public Assignment getTriggersAssignment_1_1_1_1() { return cTriggersAssignment_1_1_1_1; }
		
		//ID
		public RuleCall getTriggersIDTerminalRuleCall_1_1_1_1_0() { return cTriggersIDTerminalRuleCall_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//gets=Gets?
		public Assignment getGetsAssignment_2() { return cGetsAssignment_2; }
		
		//Gets
		public RuleCall getGetsGetsParserRuleCall_2_0() { return cGetsGetsParserRuleCall_2_0; }
		
		//sets=Sets?
		public Assignment getSetsAssignment_3() { return cSetsAssignment_3; }
		
		//Sets
		public RuleCall getSetsSetsParserRuleCall_3_0() { return cSetsSetsParserRuleCall_3_0; }
		
		//code=CODE
		public Assignment getCodeAssignment_4() { return cCodeAssignment_4; }
		
		//CODE
		public RuleCall getCodeCODETerminalRuleCall_4_0() { return cCodeCODETerminalRuleCall_4_0; }
	}
	public class PreambleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Preamble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPreambleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeCODETerminalRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		
		//Preamble:
		//	'preamble' code=CODE;
		@Override public ParserRule getRule() { return rule; }
		
		//'preamble' code=CODE
		public Group getGroup() { return cGroup; }
		
		//'preamble'
		public Keyword getPreambleKeyword_0() { return cPreambleKeyword_0; }
		
		//code=CODE
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }
		
		//CODE
		public RuleCall getCodeCODETerminalRuleCall_1_0() { return cCodeCODETerminalRuleCall_1_0; }
	}
	public class InitializeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Initialize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitializeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeCODETerminalRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		
		//Initialize:
		//	'initialize' code=CODE;
		@Override public ParserRule getRule() { return rule; }
		
		//'initialize' code=CODE
		public Group getGroup() { return cGroup; }
		
		//'initialize'
		public Keyword getInitializeKeyword_0() { return cInitializeKeyword_0; }
		
		//code=CODE
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }
		
		//CODE
		public RuleCall getCodeCODETerminalRuleCall_1_0() { return cCodeCODETerminalRuleCall_1_0; }
	}
	public class InstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Instance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActorClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cActorClassActorCrossReference_3_0 = (CrossReference)cActorClassAssignment_3.eContents().get(0);
		private final RuleCall cActorClassActorIDTerminalRuleCall_3_0_1 = (RuleCall)cActorClassActorCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersAssignmentsParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// FIXME: actorClass should be able to be a Composite.
		//Instance:
		//	'instance' name=ID '=' actorClass=[Actor] ('(' parameters=Assignments? ')')? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'instance' name=ID '=' actorClass=[Actor] ('(' parameters=Assignments? ')')? ';'
		public Group getGroup() { return cGroup; }
		
		//'instance'
		public Keyword getInstanceKeyword_0() { return cInstanceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//actorClass=[Actor]
		public Assignment getActorClassAssignment_3() { return cActorClassAssignment_3; }
		
		//[Actor]
		public CrossReference getActorClassActorCrossReference_3_0() { return cActorClassActorCrossReference_3_0; }
		
		//ID
		public RuleCall getActorClassActorIDTerminalRuleCall_3_0_1() { return cActorClassActorIDTerminalRuleCall_3_0_1; }
		
		//('(' parameters=Assignments? ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//parameters=Assignments?
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }
		
		//Assignments
		public RuleCall getParametersAssignmentsParserRuleCall_4_1_0() { return cParametersAssignmentsParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Connection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftPortAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftPortPortParserRuleCall_0_0 = (RuleCall)cLeftPortAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightPortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightPortPortParserRuleCall_2_0 = (RuleCall)cRightPortAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Connection:
		//	leftPort=Port '->' rightPort=Port ';';
		@Override public ParserRule getRule() { return rule; }
		
		//leftPort=Port '->' rightPort=Port ';'
		public Group getGroup() { return cGroup; }
		
		//leftPort=Port
		public Assignment getLeftPortAssignment_0() { return cLeftPortAssignment_0; }
		
		//Port
		public RuleCall getLeftPortPortParserRuleCall_0_0() { return cLeftPortPortParserRuleCall_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//rightPort=Port
		public Assignment getRightPortAssignment_2() { return cRightPortAssignment_2; }
		
		//Port
		public RuleCall getRightPortPortParserRuleCall_2_0() { return cRightPortPortParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class AssignmentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Assignments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssignmentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_0_0 = (RuleCall)cAssignmentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAssignmentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_1_1_0 = (RuleCall)cAssignmentsAssignment_1_1.eContents().get(0);
		
		///////////// Pieces
		//Assignments:
		//	assignments+=Assignment (',' assignments+=Assignment)*;
		@Override public ParserRule getRule() { return rule; }
		
		//assignments+=Assignment (',' assignments+=Assignment)*
		public Group getGroup() { return cGroup; }
		
		//assignments+=Assignment
		public Assignment getAssignmentsAssignment_0() { return cAssignmentsAssignment_0; }
		
		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_0_0() { return cAssignmentsAssignmentParserRuleCall_0_0; }
		
		//(',' assignments+=Assignment)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//assignments+=Assignment
		public Assignment getAssignmentsAssignment_1_1() { return cAssignmentsAssignment_1_1; }
		
		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_1_1_0() { return cAssignmentsAssignmentParserRuleCall_1_1_0; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Assignment:
		//	name=ID '=' value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' value=Value
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class GetsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Gets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGetsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGetsIDTerminalRuleCall_0_0 = (RuleCall)cGetsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGetsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGetsIDTerminalRuleCall_1_1_0 = (RuleCall)cGetsAssignment_1_1.eContents().get(0);
		
		//// Specification of what inputs a reaction reads.
		//Gets:
		//	gets+=ID (',' gets+=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//gets+=ID (',' gets+=ID)?
		public Group getGroup() { return cGroup; }
		
		//gets+=ID
		public Assignment getGetsAssignment_0() { return cGetsAssignment_0; }
		
		//ID
		public RuleCall getGetsIDTerminalRuleCall_0_0() { return cGetsIDTerminalRuleCall_0_0; }
		
		//(',' gets+=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//gets+=ID
		public Assignment getGetsAssignment_1_1() { return cGetsAssignment_1_1; }
		
		//ID
		public RuleCall getGetsIDTerminalRuleCall_1_1_0() { return cGetsIDTerminalRuleCall_1_1_0; }
	}
	public class ParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Params");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Parameters for actors and composites.
		//Params:
		//	'(' params+=Param (',' params+=Param)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' params+=Param (',' params+=Param)* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//params+=Param
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_1_0() { return cParamsParamParserRuleCall_1_0; }
		
		//(',' params+=Param)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//params+=Param
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_2_1_0() { return cParamsParamParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// Single parameter.
		//Param:
		//	'const'? name=ID (':' type=Type)? ('(' value=Value ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'const'? name=ID (':' type=Type)? ('(' value=Value ')')?
		public Group getGroup() { return cGroup; }
		
		//'const'?
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' type=Type)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//type=Type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }
		
		//('(' value=Value ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//value=Value
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_3_1_0() { return cValueValueParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class PeriodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Period");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPeriodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cPeriodAlternatives_1_0 = (Alternatives)cPeriodAssignment_1.eContents().get(0);
		private final RuleCall cPeriodIDTerminalRuleCall_1_0_0 = (RuleCall)cPeriodAlternatives_1_0.eContents().get(0);
		private final RuleCall cPeriodNUMBERTerminalRuleCall_1_0_1 = (RuleCall)cPeriodAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cPeriodicAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final Keyword cPeriodicPERIODICKeyword_2_1_0_0 = (Keyword)cPeriodicAssignment_2_1_0.eContents().get(0);
		private final Assignment cOnceAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final Keyword cOnceONCEKeyword_2_1_1_0 = (Keyword)cOnceAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Periodicity spec for a trigger.
		//// E.g. (1000) or (1000, PERIODIC) or (1000, ONCE)
		//Period:
		//	'(' period=(ID | NUMBER) (',' (periodic?='PERIODIC' | once?='ONCE'))? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' period=(ID | NUMBER) (',' (periodic?='PERIODIC' | once?='ONCE'))? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//period=(ID | NUMBER)
		public Assignment getPeriodAssignment_1() { return cPeriodAssignment_1; }
		
		//(ID | NUMBER)
		public Alternatives getPeriodAlternatives_1_0() { return cPeriodAlternatives_1_0; }
		
		//ID
		public RuleCall getPeriodIDTerminalRuleCall_1_0_0() { return cPeriodIDTerminalRuleCall_1_0_0; }
		
		//NUMBER
		public RuleCall getPeriodNUMBERTerminalRuleCall_1_0_1() { return cPeriodNUMBERTerminalRuleCall_1_0_1; }
		
		//(',' (periodic?='PERIODIC' | once?='ONCE'))?
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//periodic?='PERIODIC' | once?='ONCE'
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//periodic?='PERIODIC'
		public Assignment getPeriodicAssignment_2_1_0() { return cPeriodicAssignment_2_1_0; }
		
		//'PERIODIC'
		public Keyword getPeriodicPERIODICKeyword_2_1_0_0() { return cPeriodicPERIODICKeyword_2_1_0_0; }
		
		//once?='ONCE'
		public Assignment getOnceAssignment_2_1_1() { return cOnceAssignment_2_1_1; }
		
		//'ONCE'
		public Keyword getOnceONCEKeyword_2_1_1_0() { return cOnceONCEKeyword_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Port");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_1_2_0 = (RuleCall)cAlternatives_1_2.eContents().get(0);
		private final Keyword cInputKeyword_1_2_1 = (Keyword)cAlternatives_1_2.eContents().get(1);
		private final Keyword cOutputKeyword_1_2_2 = (Keyword)cAlternatives_1_2.eContents().get(2);
		
		//// 'input' and 'output' are allowed port names despite being keywords.
		//Port:
		//	ID | ID '.' (ID | 'input' | 'output');
		@Override public ParserRule getRule() { return rule; }
		
		//ID | ID '.' (ID | 'input' | 'output')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//ID '.' (ID | 'input' | 'output')
		public Group getGroup_1() { return cGroup_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//ID | 'input' | 'output'
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_2_0() { return cIDTerminalRuleCall_1_2_0; }
		
		//'input'
		public Keyword getInputKeyword_1_2_1() { return cInputKeyword_1_2_1; }
		
		//'output'
		public Keyword getOutputKeyword_1_2_2() { return cOutputKeyword_1_2_2; }
	}
	public class SetsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Sets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSetsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSetsIDTerminalRuleCall_1_0 = (RuleCall)cSetsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSetsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSetsIDTerminalRuleCall_2_1_0 = (RuleCall)cSetsAssignment_2_1.eContents().get(0);
		
		//// Specification of what outputs a reaction writes.
		//Sets:
		//	'->' sets+=ID (',' sets+=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'->' sets+=ID (',' sets+=ID)?
		public Group getGroup() { return cGroup; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }
		
		//sets+=ID
		public Assignment getSetsAssignment_1() { return cSetsAssignment_1; }
		
		//ID
		public RuleCall getSetsIDTerminalRuleCall_1_0() { return cSetsIDTerminalRuleCall_1_0; }
		
		//(',' sets+=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//sets+=ID
		public Assignment getSetsAssignment_2_1() { return cSetsAssignment_2_1; }
		
		//ID
		public RuleCall getSetsIDTerminalRuleCall_2_1_0() { return cSetsIDTerminalRuleCall_2_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCODETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// A type is in the target language, hence either an ID or target code.
		//Type:
		//	ID | CODE;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | CODE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//CODE
		public RuleCall getCODETerminalRuleCall_1() { return cCODETerminalRuleCall_1; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNUMBERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCODETerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Value:
		//	ID | NUMBER | STRING | CODE;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | NUMBER | STRING | CODE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1() { return cNUMBERTerminalRuleCall_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
		
		//CODE
		public RuleCall getCODETerminalRuleCall_3() { return cCODETerminalRuleCall_3; }
	}
	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//// The following cannot be terminal because it overlaps ID.
		//Path:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final ModelElements pModel;
	private final TargetElements pTarget;
	private final ImportElements pImport;
	private final ActorElements pActor;
	private final CompositeElements pComposite;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final TriggerElements pTrigger;
	private final ReactionElements pReaction;
	private final PreambleElements pPreamble;
	private final InitializeElements pInitialize;
	private final InstanceElements pInstance;
	private final ConnectionElements pConnection;
	private final AssignmentsElements pAssignments;
	private final AssignmentElements pAssignment;
	private final GetsElements pGets;
	private final ParamsElements pParams;
	private final ParamElements pParam;
	private final PeriodElements pPeriod;
	private final PortElements pPort;
	private final SetsElements pSets;
	private final TypeElements pType;
	private final ValueElements pValue;
	private final TerminalRule tNUMBER;
	private final TerminalRule tCODE;
	private final PathElements pPath;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LinguaFrancaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTarget = new TargetElements();
		this.pImport = new ImportElements();
		this.pActor = new ActorElements();
		this.pComposite = new CompositeElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pTrigger = new TriggerElements();
		this.pReaction = new ReactionElements();
		this.pPreamble = new PreambleElements();
		this.pInitialize = new InitializeElements();
		this.pInstance = new InstanceElements();
		this.pConnection = new ConnectionElements();
		this.pAssignments = new AssignmentsElements();
		this.pAssignment = new AssignmentElements();
		this.pGets = new GetsElements();
		this.pParams = new ParamsElements();
		this.pParam = new ParamElements();
		this.pPeriod = new PeriodElements();
		this.pPort = new PortElements();
		this.pSets = new SetsElements();
		this.pType = new TypeElements();
		this.pValue = new ValueElements();
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.NUMBER");
		this.tCODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.icyphy.LinguaFranca.CODE");
		this.pPath = new PathElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.icyphy.LinguaFranca".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///////////// Overall file
	//Model:
	//	target=Target
	//	imports+=Import*
	//	blocks+=(Actor | Composite)+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	///////////// Top level elements
	//Target:
	//	'target' name=ID ';';
	public TargetElements getTargetAccess() {
		return pTarget;
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}
	
	//Import:
	//	'import' name=Path ';';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//// The following enforces the order of definitions:
	//// inputs, outputs, triggers, preamble, etc.
	//Actor:
	//	'actor' name=ID parameters=Params? '{'
	//	inputs+=Input*
	//	outputs+=Output*
	//	triggers+=Trigger*
	//	preamble=Preamble?
	//	initialize=Initialize?
	//	reactions+=Reaction*
	//	'}';
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//Composite:
	//	'composite' name=ID parameters=Params? '{'
	//	inputs+=Input*
	//	outputs+=Output*
	//	triggers+=Trigger*
	//	preamble=Preamble?
	//	initialize=Initialize?
	//	reactions+=Reaction*
	//	instances+=Instance*
	//	connections+=Connection*
	//	'}';
	public CompositeElements getCompositeAccess() {
		return pComposite;
	}
	
	public ParserRule getCompositeRule() {
		return getCompositeAccess().getRule();
	}
	
	///////////// Statements
	//// Note explicit allowance of keywords for names of inputs, outputs, triggers.
	//Input:
	//	'input' name=(ID | 'input') (':' type=Type)? ';';
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//	'output' name=(ID | 'output') (':' type=Type)? ';';
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//Trigger:
	//	'trigger' name=(ID | 'trigger') period=Period? ';';
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	//Reaction:
	//	'reaction' ('(' (triggers+=ID (',' triggers+=ID)*)? ')')?
	//	gets=Gets?
	//	sets=Sets?
	//	code=CODE;
	public ReactionElements getReactionAccess() {
		return pReaction;
	}
	
	public ParserRule getReactionRule() {
		return getReactionAccess().getRule();
	}
	
	//Preamble:
	//	'preamble' code=CODE;
	public PreambleElements getPreambleAccess() {
		return pPreamble;
	}
	
	public ParserRule getPreambleRule() {
		return getPreambleAccess().getRule();
	}
	
	//Initialize:
	//	'initialize' code=CODE;
	public InitializeElements getInitializeAccess() {
		return pInitialize;
	}
	
	public ParserRule getInitializeRule() {
		return getInitializeAccess().getRule();
	}
	
	//// FIXME: actorClass should be able to be a Composite.
	//Instance:
	//	'instance' name=ID '=' actorClass=[Actor] ('(' parameters=Assignments? ')')? ';';
	public InstanceElements getInstanceAccess() {
		return pInstance;
	}
	
	public ParserRule getInstanceRule() {
		return getInstanceAccess().getRule();
	}
	
	//Connection:
	//	leftPort=Port '->' rightPort=Port ';';
	public ConnectionElements getConnectionAccess() {
		return pConnection;
	}
	
	public ParserRule getConnectionRule() {
		return getConnectionAccess().getRule();
	}
	
	///////////// Pieces
	//Assignments:
	//	assignments+=Assignment (',' assignments+=Assignment)*;
	public AssignmentsElements getAssignmentsAccess() {
		return pAssignments;
	}
	
	public ParserRule getAssignmentsRule() {
		return getAssignmentsAccess().getRule();
	}
	
	//Assignment:
	//	name=ID '=' value=Value;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//// Specification of what inputs a reaction reads.
	//Gets:
	//	gets+=ID (',' gets+=ID)?;
	public GetsElements getGetsAccess() {
		return pGets;
	}
	
	public ParserRule getGetsRule() {
		return getGetsAccess().getRule();
	}
	
	//// Parameters for actors and composites.
	//Params:
	//	'(' params+=Param (',' params+=Param)* ')';
	public ParamsElements getParamsAccess() {
		return pParams;
	}
	
	public ParserRule getParamsRule() {
		return getParamsAccess().getRule();
	}
	
	//// Single parameter.
	//Param:
	//	'const'? name=ID (':' type=Type)? ('(' value=Value ')')?;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//// Periodicity spec for a trigger.
	//// E.g. (1000) or (1000, PERIODIC) or (1000, ONCE)
	//Period:
	//	'(' period=(ID | NUMBER) (',' (periodic?='PERIODIC' | once?='ONCE'))? ')';
	public PeriodElements getPeriodAccess() {
		return pPeriod;
	}
	
	public ParserRule getPeriodRule() {
		return getPeriodAccess().getRule();
	}
	
	//// 'input' and 'output' are allowed port names despite being keywords.
	//Port:
	//	ID | ID '.' (ID | 'input' | 'output');
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//// Specification of what outputs a reaction writes.
	//Sets:
	//	'->' sets+=ID (',' sets+=ID)?;
	public SetsElements getSetsAccess() {
		return pSets;
	}
	
	public ParserRule getSetsRule() {
		return getSetsAccess().getRule();
	}
	
	//// A type is in the target language, hence either an ID or target code.
	//Type:
	//	ID | CODE;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Value:
	//	ID | NUMBER | STRING | CODE;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//terminal NUMBER:
	//	'-'? INT ('.' INT)?;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//terminal CODE:
	//	'{=' .* '=}';
	public TerminalRule getCODERule() {
		return tCODE;
	}
	
	//// The following cannot be terminal because it overlaps ID.
	//Path:
	//	ID ('.' ID)*;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

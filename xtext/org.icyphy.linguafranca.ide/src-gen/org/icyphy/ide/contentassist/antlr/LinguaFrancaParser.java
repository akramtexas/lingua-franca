/*
 * generated by Xtext 2.17.0
 */
package org.icyphy.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.icyphy.ide.contentassist.antlr.internal.InternalLinguaFrancaParser;
import org.icyphy.services.LinguaFrancaGrammarAccess;

public class LinguaFrancaParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LinguaFrancaGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LinguaFrancaGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getBlocksAlternatives_2_0(), "rule__Model__BlocksAlternatives_2_0");
			builder.put(grammarAccess.getInputAccess().getNameAlternatives_1_0(), "rule__Input__NameAlternatives_1_0");
			builder.put(grammarAccess.getOutputAccess().getNameAlternatives_1_0(), "rule__Output__NameAlternatives_1_0");
			builder.put(grammarAccess.getTriggerAccess().getNameAlternatives_1_0(), "rule__Trigger__NameAlternatives_1_0");
			builder.put(grammarAccess.getPeriodAccess().getPeriodAlternatives_1_0(), "rule__Period__PeriodAlternatives_1_0");
			builder.put(grammarAccess.getPeriodAccess().getAlternatives_2_1(), "rule__Period__Alternatives_2_1");
			builder.put(grammarAccess.getPortAccess().getAlternatives(), "rule__Port__Alternatives");
			builder.put(grammarAccess.getPortAccess().getAlternatives_1_2(), "rule__Port__Alternatives_1_2");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getTargetAccess().getGroup(), "rule__Target__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getActorAccess().getGroup(), "rule__Actor__Group__0");
			builder.put(grammarAccess.getCompositeAccess().getGroup(), "rule__Composite__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup_2(), "rule__Input__Group_2__0");
			builder.put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
			builder.put(grammarAccess.getOutputAccess().getGroup_2(), "rule__Output__Group_2__0");
			builder.put(grammarAccess.getTriggerAccess().getGroup(), "rule__Trigger__Group__0");
			builder.put(grammarAccess.getReactionAccess().getGroup(), "rule__Reaction__Group__0");
			builder.put(grammarAccess.getReactionAccess().getGroup_1(), "rule__Reaction__Group_1__0");
			builder.put(grammarAccess.getReactionAccess().getGroup_1_1(), "rule__Reaction__Group_1_1__0");
			builder.put(grammarAccess.getReactionAccess().getGroup_1_1_1(), "rule__Reaction__Group_1_1_1__0");
			builder.put(grammarAccess.getPreambleAccess().getGroup(), "rule__Preamble__Group__0");
			builder.put(grammarAccess.getInitializeAccess().getGroup(), "rule__Initialize__Group__0");
			builder.put(grammarAccess.getInstanceAccess().getGroup(), "rule__Instance__Group__0");
			builder.put(grammarAccess.getInstanceAccess().getGroup_4(), "rule__Instance__Group_4__0");
			builder.put(grammarAccess.getConnectionAccess().getGroup(), "rule__Connection__Group__0");
			builder.put(grammarAccess.getAssignmentsAccess().getGroup(), "rule__Assignments__Group__0");
			builder.put(grammarAccess.getAssignmentsAccess().getGroup_1(), "rule__Assignments__Group_1__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getGetsAccess().getGroup(), "rule__Gets__Group__0");
			builder.put(grammarAccess.getGetsAccess().getGroup_1(), "rule__Gets__Group_1__0");
			builder.put(grammarAccess.getParamsAccess().getGroup(), "rule__Params__Group__0");
			builder.put(grammarAccess.getParamsAccess().getGroup_2(), "rule__Params__Group_2__0");
			builder.put(grammarAccess.getParamAccess().getGroup(), "rule__Param__Group__0");
			builder.put(grammarAccess.getParamAccess().getGroup_2(), "rule__Param__Group_2__0");
			builder.put(grammarAccess.getParamAccess().getGroup_3(), "rule__Param__Group_3__0");
			builder.put(grammarAccess.getPeriodAccess().getGroup(), "rule__Period__Group__0");
			builder.put(grammarAccess.getPeriodAccess().getGroup_2(), "rule__Period__Group_2__0");
			builder.put(grammarAccess.getPortAccess().getGroup_1(), "rule__Port__Group_1__0");
			builder.put(grammarAccess.getSetsAccess().getGroup(), "rule__Sets__Group__0");
			builder.put(grammarAccess.getSetsAccess().getGroup_2(), "rule__Sets__Group_2__0");
			builder.put(grammarAccess.getPathAccess().getGroup(), "rule__Path__Group__0");
			builder.put(grammarAccess.getPathAccess().getGroup_1(), "rule__Path__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getTargetAssignment_0(), "rule__Model__TargetAssignment_0");
			builder.put(grammarAccess.getModelAccess().getImportsAssignment_1(), "rule__Model__ImportsAssignment_1");
			builder.put(grammarAccess.getModelAccess().getBlocksAssignment_2(), "rule__Model__BlocksAssignment_2");
			builder.put(grammarAccess.getTargetAccess().getNameAssignment_1(), "rule__Target__NameAssignment_1");
			builder.put(grammarAccess.getImportAccess().getNameAssignment_1(), "rule__Import__NameAssignment_1");
			builder.put(grammarAccess.getActorAccess().getNameAssignment_1(), "rule__Actor__NameAssignment_1");
			builder.put(grammarAccess.getActorAccess().getParametersAssignment_2(), "rule__Actor__ParametersAssignment_2");
			builder.put(grammarAccess.getActorAccess().getInputsAssignment_4(), "rule__Actor__InputsAssignment_4");
			builder.put(grammarAccess.getActorAccess().getOutputsAssignment_5(), "rule__Actor__OutputsAssignment_5");
			builder.put(grammarAccess.getActorAccess().getTriggersAssignment_6(), "rule__Actor__TriggersAssignment_6");
			builder.put(grammarAccess.getActorAccess().getPreambleAssignment_7(), "rule__Actor__PreambleAssignment_7");
			builder.put(grammarAccess.getActorAccess().getInitializeAssignment_8(), "rule__Actor__InitializeAssignment_8");
			builder.put(grammarAccess.getActorAccess().getReactionsAssignment_9(), "rule__Actor__ReactionsAssignment_9");
			builder.put(grammarAccess.getCompositeAccess().getNameAssignment_1(), "rule__Composite__NameAssignment_1");
			builder.put(grammarAccess.getCompositeAccess().getParametersAssignment_2(), "rule__Composite__ParametersAssignment_2");
			builder.put(grammarAccess.getCompositeAccess().getInputsAssignment_4(), "rule__Composite__InputsAssignment_4");
			builder.put(grammarAccess.getCompositeAccess().getOutputsAssignment_5(), "rule__Composite__OutputsAssignment_5");
			builder.put(grammarAccess.getCompositeAccess().getTriggersAssignment_6(), "rule__Composite__TriggersAssignment_6");
			builder.put(grammarAccess.getCompositeAccess().getPreambleAssignment_7(), "rule__Composite__PreambleAssignment_7");
			builder.put(grammarAccess.getCompositeAccess().getInitializeAssignment_8(), "rule__Composite__InitializeAssignment_8");
			builder.put(grammarAccess.getCompositeAccess().getReactionsAssignment_9(), "rule__Composite__ReactionsAssignment_9");
			builder.put(grammarAccess.getCompositeAccess().getInstancesAssignment_10(), "rule__Composite__InstancesAssignment_10");
			builder.put(grammarAccess.getCompositeAccess().getConnectionsAssignment_11(), "rule__Composite__ConnectionsAssignment_11");
			builder.put(grammarAccess.getInputAccess().getNameAssignment_1(), "rule__Input__NameAssignment_1");
			builder.put(grammarAccess.getInputAccess().getTypeAssignment_2_1(), "rule__Input__TypeAssignment_2_1");
			builder.put(grammarAccess.getOutputAccess().getNameAssignment_1(), "rule__Output__NameAssignment_1");
			builder.put(grammarAccess.getOutputAccess().getTypeAssignment_2_1(), "rule__Output__TypeAssignment_2_1");
			builder.put(grammarAccess.getTriggerAccess().getNameAssignment_1(), "rule__Trigger__NameAssignment_1");
			builder.put(grammarAccess.getTriggerAccess().getPeriodAssignment_2(), "rule__Trigger__PeriodAssignment_2");
			builder.put(grammarAccess.getReactionAccess().getTriggersAssignment_1_1_0(), "rule__Reaction__TriggersAssignment_1_1_0");
			builder.put(grammarAccess.getReactionAccess().getTriggersAssignment_1_1_1_1(), "rule__Reaction__TriggersAssignment_1_1_1_1");
			builder.put(grammarAccess.getReactionAccess().getGetsAssignment_2(), "rule__Reaction__GetsAssignment_2");
			builder.put(grammarAccess.getReactionAccess().getSetsAssignment_3(), "rule__Reaction__SetsAssignment_3");
			builder.put(grammarAccess.getReactionAccess().getCodeAssignment_4(), "rule__Reaction__CodeAssignment_4");
			builder.put(grammarAccess.getPreambleAccess().getCodeAssignment_1(), "rule__Preamble__CodeAssignment_1");
			builder.put(grammarAccess.getInitializeAccess().getCodeAssignment_1(), "rule__Initialize__CodeAssignment_1");
			builder.put(grammarAccess.getInstanceAccess().getNameAssignment_1(), "rule__Instance__NameAssignment_1");
			builder.put(grammarAccess.getInstanceAccess().getActorClassAssignment_3(), "rule__Instance__ActorClassAssignment_3");
			builder.put(grammarAccess.getInstanceAccess().getParametersAssignment_4_1(), "rule__Instance__ParametersAssignment_4_1");
			builder.put(grammarAccess.getConnectionAccess().getLeftPortAssignment_0(), "rule__Connection__LeftPortAssignment_0");
			builder.put(grammarAccess.getConnectionAccess().getRightPortAssignment_2(), "rule__Connection__RightPortAssignment_2");
			builder.put(grammarAccess.getAssignmentsAccess().getAssignmentsAssignment_0(), "rule__Assignments__AssignmentsAssignment_0");
			builder.put(grammarAccess.getAssignmentsAccess().getAssignmentsAssignment_1_1(), "rule__Assignments__AssignmentsAssignment_1_1");
			builder.put(grammarAccess.getAssignmentAccess().getNameAssignment_0(), "rule__Assignment__NameAssignment_0");
			builder.put(grammarAccess.getAssignmentAccess().getValueAssignment_2(), "rule__Assignment__ValueAssignment_2");
			builder.put(grammarAccess.getGetsAccess().getGetsAssignment_0(), "rule__Gets__GetsAssignment_0");
			builder.put(grammarAccess.getGetsAccess().getGetsAssignment_1_1(), "rule__Gets__GetsAssignment_1_1");
			builder.put(grammarAccess.getParamsAccess().getParamsAssignment_1(), "rule__Params__ParamsAssignment_1");
			builder.put(grammarAccess.getParamsAccess().getParamsAssignment_2_1(), "rule__Params__ParamsAssignment_2_1");
			builder.put(grammarAccess.getParamAccess().getNameAssignment_1(), "rule__Param__NameAssignment_1");
			builder.put(grammarAccess.getParamAccess().getTypeAssignment_2_1(), "rule__Param__TypeAssignment_2_1");
			builder.put(grammarAccess.getParamAccess().getValueAssignment_3_1(), "rule__Param__ValueAssignment_3_1");
			builder.put(grammarAccess.getPeriodAccess().getPeriodAssignment_1(), "rule__Period__PeriodAssignment_1");
			builder.put(grammarAccess.getPeriodAccess().getPeriodicAssignment_2_1_0(), "rule__Period__PeriodicAssignment_2_1_0");
			builder.put(grammarAccess.getPeriodAccess().getOnceAssignment_2_1_1(), "rule__Period__OnceAssignment_2_1_1");
			builder.put(grammarAccess.getSetsAccess().getSetsAssignment_1(), "rule__Sets__SetsAssignment_1");
			builder.put(grammarAccess.getSetsAccess().getSetsAssignment_2_1(), "rule__Sets__SetsAssignment_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LinguaFrancaGrammarAccess grammarAccess;

	@Override
	protected InternalLinguaFrancaParser createParser() {
		InternalLinguaFrancaParser result = new InternalLinguaFrancaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LinguaFrancaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LinguaFrancaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
